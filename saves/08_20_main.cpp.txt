/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "uMultask.h"

/* Private includes ---------------^---------------------------------^----------*/
/* USER CODE BEGIN Includes */

#include "uHUart.h"

template<uintptr_t GPIO_BASE_ADDR, uint32_t GPIO_PIN>
class TestPin {
public:
		constexpr static uint32_t INPUT  = 0;
		constexpr static uint32_t OUTPUT  = 1;
		constexpr static GPIO_TypeDef* _PORT(){ return (GPIO_TypeDef*)GPIO_BASE_ADDR; }
		constexpr static uint32_t GPIO_NUMBER  = 16U;

		static void init(uint32_t _mode = OUTPUT){
			/*
				LL_USART_InitTypeDef USART_InitStruct = {0};
				GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
				GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
				GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
				GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
				GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
				GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
				LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
			 */
		  /*
		  */
			GPIO_InitTypeDef GPIO_InitStruct = {0};
			GPIO_InitStruct.Pin = GPIO_PIN;
			if (_mode == OUTPUT){
			  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
			}
			else{
			  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
			}
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		  HAL_GPIO_Init(_PORT(), &GPIO_InitStruct);
		}

    static void high(){
  		_PORT()->BSRR = GPIO_PIN;
      __NOP();
    }

    static void low(){
    	_PORT()->BRR = GPIO_PIN;
      __NOP();
    }

    static void pulse() {
    	high();
      low();
    }

    static void toggle(){
      uint32_t odr = _PORT()->ODR;
      _PORT()->BSRR = ((odr & GPIO_PIN) << (16U)) | (~odr & GPIO_PIN);
    }
};

typedef TestPin<GPIOB_BASE, LL_GPIO_PIN_0> ARB_PIN;
typedef TestPin<GPIOB_BASE, LL_GPIO_PIN_10> TP1;
typedef TestPin<GPIOB_BASE, LL_GPIO_PIN_3> TP2;

#include "uTypedef.h"
#include "uUart.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

typedef ThUart<USART1_BASE> hUart485;


class Tuart_com7 : public Tuart{
		constexpr static uint32_t ERR_MASK = (USART_ISR_ORE | USART_ISR_FE | USART_ISR_NE | USART_ISR_PE);

		void enableRxIT(){LL_USART_EnableIT_RXNE_RXFNE(USART1); }
		void disableRxIT(){ LL_USART_DisableIT_RXNE_RXFNE(USART1); }

		void doWriteBlocking(void* _buf, int _size){
    	uint8_t* str = static_cast<uint8_t*>(_buf);
    	auto _len = _size;
      while (_len > 0)
      {
          //USART Transmit Data Register Empty or USART TX FIFO Not Full???
          if (LL_USART_IsActiveFlag_TXE_TXFNF(USART1)){
          	LL_USART_TransmitData8(USART1, *str++);
            _len--;
          }
      }
		}

		bool doWriteFifo(void* _buf, int _size){
			__disable_irq();
			if (!rxBusy()){
	    	LL_USART_TransmitData8(USART1, *FtxPtr++);
	    	LL_USART_TransmitData8(USART1, *FtxPtr++);
	    	disableRxIT();
	    	flushRx();
	    	LL_USART_EnableIT_TXFE(USART1);
				__enable_irq();
	    	return true;
			}
			__enable_irq();
			return false;
		}

		void doWriteTC(void* _buf, int _size){
    	LL_USART_TransmitData8(USART1, *FtxPtr++);
    	LL_USART_EnableIT_TC(USART1);
    }

		bool doWrite(void* _buf, int _size) override{
			return doWriteFifo(_buf,_size);
		}

    bool doWrite(dtypes::uint8 _byte) override {
    	LL_USART_TransmitData8(USART1, _byte);
    	return true;
    }

    void flushRx(){
			USART1->RQR = USART_RQR_RXFRQ;
    }

    void handleError(){
      // Handle Overrun Error
      if (USART1->ISR & USART_ISR_ORE) {
				USART1->ICR = USART_ICR_ORECF;
				flushRx();
      }

      // Handle Framing Error
      if (USART1->ISR & USART_ISR_FE) {
				USART1->ICR = USART_ICR_FECF;
      }

      // Handle Noise Error
      if (USART1->ISR & USART_ISR_NE) {
      	USART1->ICR = USART_ICR_NECF;
      }

      // Handle Parity Error
      if (USART1->ISR & USART_ISR_PE) {
      	USART1->ICR = USART_ICR_PECF;
      }
    }

		public:
			bool rxBusy(){
				return (LL_EXTI_ReadFallingFlag_0_31(LL_EXTI_LINE_0) > 0) || (LL_EXTI_ReadRisingFlag_0_31(LL_EXTI_LINE_0) > 0);
			}

			void resetRxBusy() override{
				LL_EXTI_ClearFallingFlag_0_31(LL_EXTI_LINE_0);
				LL_EXTI_ClearRisingFlag_0_31(LL_EXTI_LINE_0);
			}

    	void isr(){
				if (USART1->ISR & ERR_MASK) return handleError();

				if (LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1))
				{
					do{
						uint8_t received_char = LL_USART_ReceiveData8(USART1);
						readByte(received_char);
					} while (LL_USART_IsActiveFlag_RXNE(USART1));
				}

				else if (LL_USART_IsActiveFlag_TXE_TXFNF(USART1) || (LL_USART_IsActiveFlag_TC(USART1))){//else if (LL_USART_IsActiveFlag_TXFE(USART1)){
					if (LL_USART_IsActiveFlag_RXNE(USART1)){
						uint8_t received_char = LL_USART_ReceiveData8(USART1);
						uint8_t send_char = *(FtxPtr-2);
						if (send_char != received_char){
							TP1::pulse();
							TP1::pulse();
						}
						else{
							TP1::pulse();
						}
					}
					else{
						TP1::pulse();
						TP1::pulse();
						TP1::pulse();
					}
					if (FtxPtr < FtxEnd){
			    	LL_USART_TransmitData8(USART1, *FtxPtr++);;
					}
					else{
						FtxPtr=nullptr;
						FtxEnd=nullptr;
						LL_USART_DisableIT_TXFE(USART1);
						LL_USART_DisableIT_TC(USART1);
						flushRx();
						enableRxIT();
					}
				}
			}
} uart_com7;

void USART1_IRQHandler(void)
{
	uart_com7.isr();
}

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
//
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart1, rx_buffer, 1); //You need to toggle a breakpoint on this line!
/*
  LL_USART_EnableIT_RXNE_RXFNE(USART1);
  LL_USART_EnableIT_RTO(USART1);
  LL_USART_EnableIT_EOB(USART1);
  LL_USART_EnableIT_RXFF(USART1);
	LL_USART_EnableIT_ERROR(USART1);
*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	Tuart::TmessageBufferTX txBuffer;
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
  	TtaskHandler().handleEvents();
  	if (uart_com7.rxBusy()){
			TP2::high();
  	}
  	if (uart_com7.hasMessage()){
  		TP2::low();
  		//uart_com7.resetRxBusy();
  		auto msg = uart_com7.getMessage();
  		memcpy(txBuffer.data,msg->data,msg->length);  		//uart_com7.write(&msg->data, msg->length);
  		for (auto i = 1; i<100; i++){
  			__NOP();
  		}
  		uart_com7.write(&txBuffer, msg->length);
  		uart_com7.ackMessage(msg);
  	}
  }
  /* USER CODE END 3 */
}

HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
  	//48000000 / (1000 / 1) = 48000
    if (HAL_SYSTICK_Config(SystemCoreClock / (10000UL / (uint32_t)uwTickFreq)) == 0U)
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
        uwTickPrio = TickPriority;
      }
      else
      {
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB6);

  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB7);

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
  NVIC_EnableIRQ(USART1_IRQn);

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
  USART_InitStruct.BaudRate = 115200*8; //9600;//
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
  LL_USART_Init(USART1, &USART_InitStruct);
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_8_8);
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
  LL_USART_EnableFIFO(USART1);
  //LL_USART_DisableFIFO(USART1);
  LL_USART_ConfigAsyncMode(USART1);

  /*
  LL_USART_SetRxTimeout(USART1,5);
  LL_USART_EnableRxTimeout(USART1);
  LL_USART_EnableIT_RTO(USART1);
  */
  /* USER CODE BEGIN WKUPType USART1 */

  LL_USART_EnableIT_RXNE_RXFNE(USART1);  // Enable RXNE interrupt

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
  {
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP1_GPIO_Port, TP1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : TP1_Pin */
  /*
  GPIO_InitStruct.Pin = TP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(TP1_GPIO_Port, &GPIO_InitStruct);
	*/

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
  TP1::init();
  TP2::init();
  ARB_PIN::init(ARB_PIN::INPUT);
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
/*
	uint16_t uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
  if (uhdata == '\n'){
  	uhdata++;
  }
*/


/*
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	//testPulse();
	//testPulse();
	HAL_StatusTypeDef res = HAL_UART_Receive_IT(&huart1, rx_buffer, 10); //You need to toggle a breakpoint on this line!
  if (res != HAL_OK){
  	start_rec_failed = 1;
  	testPulse();
  	testPulse();
  	testPulse();
  	testPulse();
  	testPulse();
  	testPulse();
  }
}
*/
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
